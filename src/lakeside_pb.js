/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.lakeside.BulbInfo', null, global);
goog.exportSymbol('proto.lakeside.BulbPacket', null, global);
goog.exportSymbol('proto.lakeside.BulbState', null, global);
goog.exportSymbol('proto.lakeside.BulbValues', null, global);
goog.exportSymbol('proto.lakeside.Ping', null, global);
goog.exportSymbol('proto.lakeside.SwitchInfo', null, global);
goog.exportSymbol('proto.lakeside.SwitchPacket', null, global);
goog.exportSymbol('proto.lakeside.SwitchState', null, global);
goog.exportSymbol('proto.lakeside.SwitchStatus', null, global);
goog.exportSymbol('proto.lakeside.T1012Packet', null, global);
goog.exportSymbol('proto.lakeside.T1013BulbInfo', null, global);
goog.exportSymbol('proto.lakeside.T1013Color', null, global);
goog.exportSymbol('proto.lakeside.T1013Control', null, global);
goog.exportSymbol('proto.lakeside.T1013Info', null, global);
goog.exportSymbol('proto.lakeside.T1013Packet', null, global);
goog.exportSymbol('proto.lakeside.T1013State', null, global);
goog.exportSymbol('proto.lakeside.T1201Packet', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.Ping.displayName = 'proto.lakeside.Ping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.Ping}
 */
proto.lakeside.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.Ping;
  return proto.lakeside.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.Ping}
 */
proto.lakeside.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.lakeside.Ping.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.Ping.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.Ping.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.Ping.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.BulbValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.BulbValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.BulbValues.displayName = 'proto.lakeside.BulbValues';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.BulbValues.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.BulbValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.BulbValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.BulbValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    brightness: jspb.Message.getField(msg, 1),
    temperature: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.BulbValues}
 */
proto.lakeside.BulbValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.BulbValues;
  return proto.lakeside.BulbValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.BulbValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.BulbValues}
 */
proto.lakeside.BulbValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBrightness(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.BulbValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.BulbValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.BulbValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.BulbValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 brightness = 1;
 * @return {number}
 */
proto.lakeside.BulbValues.prototype.getBrightness = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.BulbValues.prototype.setBrightness = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.BulbValues.prototype.clearBrightness = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbValues.prototype.hasBrightness = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 temperature = 2;
 * @return {number}
 */
proto.lakeside.BulbValues.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.lakeside.BulbValues.prototype.setTemperature = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lakeside.BulbValues.prototype.clearTemperature = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbValues.prototype.hasTemperature = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.BulbState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.BulbState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.BulbState.displayName = 'proto.lakeside.BulbState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.BulbState.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.BulbState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.BulbState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.BulbState.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getField(msg, 1),
    values: (f = msg.getValues()) && proto.lakeside.BulbValues.toObject(includeInstance, f),
    power: jspb.Message.getField(msg, 3),
    unknown1: jspb.Message.getField(msg, 4),
    values2: (f = msg.getValues2()) && proto.lakeside.BulbValues.toObject(includeInstance, f),
    unknown2: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.BulbState}
 */
proto.lakeside.BulbState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.BulbState;
  return proto.lakeside.BulbState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.BulbState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.BulbState}
 */
proto.lakeside.BulbState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommand(value);
      break;
    case 2:
      var value = new proto.lakeside.BulbValues;
      reader.readMessage(value,proto.lakeside.BulbValues.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPower(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown1(value);
      break;
    case 5:
      var value = new proto.lakeside.BulbValues;
      reader.readMessage(value,proto.lakeside.BulbValues.deserializeBinaryFromReader);
      msg.setValues2(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.BulbState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.BulbState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.BulbState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.BulbState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lakeside.BulbValues.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getValues2();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.lakeside.BulbValues.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * required int32 command = 1;
 * @return {number}
 */
proto.lakeside.BulbState.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.BulbState.prototype.setCommand = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.BulbState.prototype.clearCommand = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbState.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BulbValues values = 2;
 * @return {?proto.lakeside.BulbValues}
 */
proto.lakeside.BulbState.prototype.getValues = function() {
  return /** @type{?proto.lakeside.BulbValues} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.BulbValues, 2));
};


/** @param {?proto.lakeside.BulbValues|undefined} value */
proto.lakeside.BulbState.prototype.setValues = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lakeside.BulbState.prototype.clearValues = function() {
  this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbState.prototype.hasValues = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 power = 3;
 * @return {number}
 */
proto.lakeside.BulbState.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.lakeside.BulbState.prototype.setPower = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.lakeside.BulbState.prototype.clearPower = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbState.prototype.hasPower = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 unknown1 = 4;
 * @return {number}
 */
proto.lakeside.BulbState.prototype.getUnknown1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.lakeside.BulbState.prototype.setUnknown1 = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.lakeside.BulbState.prototype.clearUnknown1 = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbState.prototype.hasUnknown1 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BulbValues values2 = 5;
 * @return {?proto.lakeside.BulbValues}
 */
proto.lakeside.BulbState.prototype.getValues2 = function() {
  return /** @type{?proto.lakeside.BulbValues} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.BulbValues, 5));
};


/** @param {?proto.lakeside.BulbValues|undefined} value */
proto.lakeside.BulbState.prototype.setValues2 = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.lakeside.BulbState.prototype.clearValues2 = function() {
  this.setValues2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbState.prototype.hasValues2 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 unknown2 = 6;
 * @return {number}
 */
proto.lakeside.BulbState.prototype.getUnknown2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.lakeside.BulbState.prototype.setUnknown2 = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.lakeside.BulbState.prototype.clearUnknown2 = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbState.prototype.hasUnknown2 = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.BulbPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.BulbPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.BulbPacket.displayName = 'proto.lakeside.BulbPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.BulbPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.BulbPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.BulbPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.BulbPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    unknown1: jspb.Message.getField(msg, 1),
    bulbstate: (f = msg.getBulbstate()) && proto.lakeside.BulbState.toObject(includeInstance, f),
    bulbset: (f = msg.getBulbset()) && proto.lakeside.BulbState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.BulbPacket}
 */
proto.lakeside.BulbPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.BulbPacket;
  return proto.lakeside.BulbPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.BulbPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.BulbPacket}
 */
proto.lakeside.BulbPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown1(value);
      break;
    case 2:
      var value = new proto.lakeside.BulbState;
      reader.readMessage(value,proto.lakeside.BulbState.deserializeBinaryFromReader);
      msg.setBulbstate(value);
      break;
    case 3:
      var value = new proto.lakeside.BulbState;
      reader.readMessage(value,proto.lakeside.BulbState.deserializeBinaryFromReader);
      msg.setBulbset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.BulbPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.BulbPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.BulbPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.BulbPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBulbstate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lakeside.BulbState.serializeBinaryToWriter
    );
  }
  f = message.getBulbset();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lakeside.BulbState.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 unknown1 = 1;
 * @return {number}
 */
proto.lakeside.BulbPacket.prototype.getUnknown1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.BulbPacket.prototype.setUnknown1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.BulbPacket.prototype.clearUnknown1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbPacket.prototype.hasUnknown1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BulbState bulbstate = 2;
 * @return {?proto.lakeside.BulbState}
 */
proto.lakeside.BulbPacket.prototype.getBulbstate = function() {
  return /** @type{?proto.lakeside.BulbState} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.BulbState, 2));
};


/** @param {?proto.lakeside.BulbState|undefined} value */
proto.lakeside.BulbPacket.prototype.setBulbstate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lakeside.BulbPacket.prototype.clearBulbstate = function() {
  this.setBulbstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbPacket.prototype.hasBulbstate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BulbState bulbset = 3;
 * @return {?proto.lakeside.BulbState}
 */
proto.lakeside.BulbPacket.prototype.getBulbset = function() {
  return /** @type{?proto.lakeside.BulbState} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.BulbState, 3));
};


/** @param {?proto.lakeside.BulbState|undefined} value */
proto.lakeside.BulbPacket.prototype.setBulbset = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.lakeside.BulbPacket.prototype.clearBulbset = function() {
  this.setBulbset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbPacket.prototype.hasBulbset = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.BulbInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.BulbInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.BulbInfo.displayName = 'proto.lakeside.BulbInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.BulbInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.BulbInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.BulbInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.BulbInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    packet: (f = msg.getPacket()) && proto.lakeside.BulbPacket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.BulbInfo}
 */
proto.lakeside.BulbInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.BulbInfo;
  return proto.lakeside.BulbInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.BulbInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.BulbInfo}
 */
proto.lakeside.BulbInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.lakeside.BulbPacket;
      reader.readMessage(value,proto.lakeside.BulbPacket.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.BulbInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.BulbInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.BulbInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.BulbInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lakeside.BulbPacket.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.lakeside.BulbInfo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.BulbInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.BulbInfo.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbInfo.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BulbPacket packet = 2;
 * @return {?proto.lakeside.BulbPacket}
 */
proto.lakeside.BulbInfo.prototype.getPacket = function() {
  return /** @type{?proto.lakeside.BulbPacket} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.BulbPacket, 2));
};


/** @param {?proto.lakeside.BulbPacket|undefined} value */
proto.lakeside.BulbInfo.prototype.setPacket = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lakeside.BulbInfo.prototype.clearPacket = function() {
  this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.BulbInfo.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.T1012Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.T1012Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.T1012Packet.displayName = 'proto.lakeside.T1012Packet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.T1012Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.T1012Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.T1012Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1012Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequence: jspb.Message.getField(msg, 1),
    code: jspb.Message.getField(msg, 2),
    ping: (f = msg.getPing()) && proto.lakeside.Ping.toObject(includeInstance, f),
    bulbinfo: (f = msg.getBulbinfo()) && proto.lakeside.BulbInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.T1012Packet}
 */
proto.lakeside.T1012Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.T1012Packet;
  return proto.lakeside.T1012Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.T1012Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.T1012Packet}
 */
proto.lakeside.T1012Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = new proto.lakeside.Ping;
      reader.readMessage(value,proto.lakeside.Ping.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 5:
      var value = new proto.lakeside.BulbInfo;
      reader.readMessage(value,proto.lakeside.BulbInfo.deserializeBinaryFromReader);
      msg.setBulbinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.T1012Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.T1012Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.T1012Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1012Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lakeside.Ping.serializeBinaryToWriter
    );
  }
  f = message.getBulbinfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.lakeside.BulbInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 sequence = 1;
 * @return {number}
 */
proto.lakeside.T1012Packet.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.T1012Packet.prototype.setSequence = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.T1012Packet.prototype.clearSequence = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1012Packet.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string code = 2;
 * @return {string}
 */
proto.lakeside.T1012Packet.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lakeside.T1012Packet.prototype.setCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lakeside.T1012Packet.prototype.clearCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1012Packet.prototype.hasCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Ping ping = 3;
 * @return {?proto.lakeside.Ping}
 */
proto.lakeside.T1012Packet.prototype.getPing = function() {
  return /** @type{?proto.lakeside.Ping} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.Ping, 3));
};


/** @param {?proto.lakeside.Ping|undefined} value */
proto.lakeside.T1012Packet.prototype.setPing = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.lakeside.T1012Packet.prototype.clearPing = function() {
  this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1012Packet.prototype.hasPing = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BulbInfo bulbinfo = 5;
 * @return {?proto.lakeside.BulbInfo}
 */
proto.lakeside.T1012Packet.prototype.getBulbinfo = function() {
  return /** @type{?proto.lakeside.BulbInfo} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.BulbInfo, 5));
};


/** @param {?proto.lakeside.BulbInfo|undefined} value */
proto.lakeside.T1012Packet.prototype.setBulbinfo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.lakeside.T1012Packet.prototype.clearBulbinfo = function() {
  this.setBulbinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1012Packet.prototype.hasBulbinfo = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.T1013Info = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.T1013Info, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.T1013Info.displayName = 'proto.lakeside.T1013Info';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.T1013Info.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.T1013Info.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.T1013Info} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1013Info.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getField(msg, 1),
    color: jspb.Message.getField(msg, 2),
    power: jspb.Message.getField(msg, 3),
    values: (f = msg.getValues()) && proto.lakeside.BulbValues.toObject(includeInstance, f),
    colors: (f = msg.getColors()) && proto.lakeside.T1013Color.toObject(includeInstance, f),
    unknown7: jspb.Message.getField(msg, 7),
    rssi: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.T1013Info}
 */
proto.lakeside.T1013Info.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.T1013Info;
  return proto.lakeside.T1013Info.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.T1013Info} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.T1013Info}
 */
proto.lakeside.T1013Info.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPower(value);
      break;
    case 4:
      var value = new proto.lakeside.BulbValues;
      reader.readMessage(value,proto.lakeside.BulbValues.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    case 5:
      var value = new proto.lakeside.T1013Color;
      reader.readMessage(value,proto.lakeside.T1013Color.deserializeBinaryFromReader);
      msg.setColors(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown7(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.T1013Info.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.T1013Info.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.T1013Info} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1013Info.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lakeside.BulbValues.serializeBinaryToWriter
    );
  }
  f = message.getColors();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.lakeside.T1013Color.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * required int32 command = 1;
 * @return {number}
 */
proto.lakeside.T1013Info.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.T1013Info.prototype.setCommand = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.T1013Info.prototype.clearCommand = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Info.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 color = 2;
 * @return {number}
 */
proto.lakeside.T1013Info.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.lakeside.T1013Info.prototype.setColor = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lakeside.T1013Info.prototype.clearColor = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Info.prototype.hasColor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 power = 3;
 * @return {number}
 */
proto.lakeside.T1013Info.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.lakeside.T1013Info.prototype.setPower = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.lakeside.T1013Info.prototype.clearPower = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Info.prototype.hasPower = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BulbValues values = 4;
 * @return {?proto.lakeside.BulbValues}
 */
proto.lakeside.T1013Info.prototype.getValues = function() {
  return /** @type{?proto.lakeside.BulbValues} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.BulbValues, 4));
};


/** @param {?proto.lakeside.BulbValues|undefined} value */
proto.lakeside.T1013Info.prototype.setValues = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.lakeside.T1013Info.prototype.clearValues = function() {
  this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Info.prototype.hasValues = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional T1013Color colors = 5;
 * @return {?proto.lakeside.T1013Color}
 */
proto.lakeside.T1013Info.prototype.getColors = function() {
  return /** @type{?proto.lakeside.T1013Color} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.T1013Color, 5));
};


/** @param {?proto.lakeside.T1013Color|undefined} value */
proto.lakeside.T1013Info.prototype.setColors = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.lakeside.T1013Info.prototype.clearColors = function() {
  this.setColors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Info.prototype.hasColors = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 unknown7 = 7;
 * @return {number}
 */
proto.lakeside.T1013Info.prototype.getUnknown7 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.lakeside.T1013Info.prototype.setUnknown7 = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.lakeside.T1013Info.prototype.clearUnknown7 = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Info.prototype.hasUnknown7 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 rssi = 8;
 * @return {number}
 */
proto.lakeside.T1013Info.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.lakeside.T1013Info.prototype.setRssi = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.lakeside.T1013Info.prototype.clearRssi = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Info.prototype.hasRssi = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.T1013Control = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.T1013Control, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.T1013Control.displayName = 'proto.lakeside.T1013Control';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.T1013Control.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.T1013Control.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.T1013Control} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1013Control.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getField(msg, 1),
    color: jspb.Message.getField(msg, 2),
    values: (f = msg.getValues()) && proto.lakeside.BulbValues.toObject(includeInstance, f),
    colors: (f = msg.getColors()) && proto.lakeside.T1013Color.toObject(includeInstance, f),
    power: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.T1013Control}
 */
proto.lakeside.T1013Control.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.T1013Control;
  return proto.lakeside.T1013Control.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.T1013Control} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.T1013Control}
 */
proto.lakeside.T1013Control.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColor(value);
      break;
    case 3:
      var value = new proto.lakeside.BulbValues;
      reader.readMessage(value,proto.lakeside.BulbValues.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    case 4:
      var value = new proto.lakeside.T1013Color;
      reader.readMessage(value,proto.lakeside.T1013Color.deserializeBinaryFromReader);
      msg.setColors(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.T1013Control.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.T1013Control.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.T1013Control} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1013Control.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lakeside.BulbValues.serializeBinaryToWriter
    );
  }
  f = message.getColors();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lakeside.T1013Color.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required int32 command = 1;
 * @return {number}
 */
proto.lakeside.T1013Control.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.T1013Control.prototype.setCommand = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.T1013Control.prototype.clearCommand = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Control.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 color = 2;
 * @return {number}
 */
proto.lakeside.T1013Control.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.lakeside.T1013Control.prototype.setColor = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lakeside.T1013Control.prototype.clearColor = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Control.prototype.hasColor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BulbValues values = 3;
 * @return {?proto.lakeside.BulbValues}
 */
proto.lakeside.T1013Control.prototype.getValues = function() {
  return /** @type{?proto.lakeside.BulbValues} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.BulbValues, 3));
};


/** @param {?proto.lakeside.BulbValues|undefined} value */
proto.lakeside.T1013Control.prototype.setValues = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.lakeside.T1013Control.prototype.clearValues = function() {
  this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Control.prototype.hasValues = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional T1013Color colors = 4;
 * @return {?proto.lakeside.T1013Color}
 */
proto.lakeside.T1013Control.prototype.getColors = function() {
  return /** @type{?proto.lakeside.T1013Color} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.T1013Color, 4));
};


/** @param {?proto.lakeside.T1013Color|undefined} value */
proto.lakeside.T1013Control.prototype.setColors = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.lakeside.T1013Control.prototype.clearColors = function() {
  this.setColors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Control.prototype.hasColors = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 power = 5;
 * @return {number}
 */
proto.lakeside.T1013Control.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.lakeside.T1013Control.prototype.setPower = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.lakeside.T1013Control.prototype.clearPower = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Control.prototype.hasPower = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.T1013Color = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.T1013Color, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.T1013Color.displayName = 'proto.lakeside.T1013Color';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.T1013Color.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.T1013Color.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.T1013Color} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1013Color.toObject = function(includeInstance, msg) {
  var f, obj = {
    red: jspb.Message.getField(msg, 1),
    green: jspb.Message.getField(msg, 2),
    blue: jspb.Message.getField(msg, 3),
    brightness: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.T1013Color}
 */
proto.lakeside.T1013Color.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.T1013Color;
  return proto.lakeside.T1013Color.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.T1013Color} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.T1013Color}
 */
proto.lakeside.T1013Color.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGreen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBrightness(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.T1013Color.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.T1013Color.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.T1013Color} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1013Color.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 red = 1;
 * @return {number}
 */
proto.lakeside.T1013Color.prototype.getRed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.T1013Color.prototype.setRed = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.T1013Color.prototype.clearRed = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Color.prototype.hasRed = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 green = 2;
 * @return {number}
 */
proto.lakeside.T1013Color.prototype.getGreen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.lakeside.T1013Color.prototype.setGreen = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lakeside.T1013Color.prototype.clearGreen = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Color.prototype.hasGreen = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 blue = 3;
 * @return {number}
 */
proto.lakeside.T1013Color.prototype.getBlue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.lakeside.T1013Color.prototype.setBlue = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.lakeside.T1013Color.prototype.clearBlue = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Color.prototype.hasBlue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 brightness = 4;
 * @return {number}
 */
proto.lakeside.T1013Color.prototype.getBrightness = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.lakeside.T1013Color.prototype.setBrightness = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.lakeside.T1013Color.prototype.clearBrightness = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Color.prototype.hasBrightness = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.T1013State = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.T1013State, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.T1013State.displayName = 'proto.lakeside.T1013State';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.T1013State.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.T1013State.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.T1013State} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1013State.toObject = function(includeInstance, msg) {
  var f, obj = {
    unknown1: jspb.Message.getField(msg, 1),
    info: (f = msg.getInfo()) && proto.lakeside.T1013Info.toObject(includeInstance, f),
    control: (f = msg.getControl()) && proto.lakeside.T1013Control.toObject(includeInstance, f),
    unknown5: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.T1013State}
 */
proto.lakeside.T1013State.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.T1013State;
  return proto.lakeside.T1013State.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.T1013State} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.T1013State}
 */
proto.lakeside.T1013State.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown1(value);
      break;
    case 2:
      var value = new proto.lakeside.T1013Info;
      reader.readMessage(value,proto.lakeside.T1013Info.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 3:
      var value = new proto.lakeside.T1013Control;
      reader.readMessage(value,proto.lakeside.T1013Control.deserializeBinaryFromReader);
      msg.setControl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown5(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.T1013State.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.T1013State.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.T1013State} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1013State.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lakeside.T1013Info.serializeBinaryToWriter
    );
  }
  f = message.getControl();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lakeside.T1013Control.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required int32 unknown1 = 1;
 * @return {number}
 */
proto.lakeside.T1013State.prototype.getUnknown1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.T1013State.prototype.setUnknown1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.T1013State.prototype.clearUnknown1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013State.prototype.hasUnknown1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional T1013Info info = 2;
 * @return {?proto.lakeside.T1013Info}
 */
proto.lakeside.T1013State.prototype.getInfo = function() {
  return /** @type{?proto.lakeside.T1013Info} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.T1013Info, 2));
};


/** @param {?proto.lakeside.T1013Info|undefined} value */
proto.lakeside.T1013State.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lakeside.T1013State.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013State.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional T1013Control control = 3;
 * @return {?proto.lakeside.T1013Control}
 */
proto.lakeside.T1013State.prototype.getControl = function() {
  return /** @type{?proto.lakeside.T1013Control} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.T1013Control, 3));
};


/** @param {?proto.lakeside.T1013Control|undefined} value */
proto.lakeside.T1013State.prototype.setControl = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.lakeside.T1013State.prototype.clearControl = function() {
  this.setControl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013State.prototype.hasControl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 unknown5 = 5;
 * @return {number}
 */
proto.lakeside.T1013State.prototype.getUnknown5 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.lakeside.T1013State.prototype.setUnknown5 = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.lakeside.T1013State.prototype.clearUnknown5 = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013State.prototype.hasUnknown5 = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.T1013BulbInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.T1013BulbInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.T1013BulbInfo.displayName = 'proto.lakeside.T1013BulbInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.T1013BulbInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.T1013BulbInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.T1013BulbInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1013BulbInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    packet: (f = msg.getPacket()) && proto.lakeside.T1013State.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.T1013BulbInfo}
 */
proto.lakeside.T1013BulbInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.T1013BulbInfo;
  return proto.lakeside.T1013BulbInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.T1013BulbInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.T1013BulbInfo}
 */
proto.lakeside.T1013BulbInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.lakeside.T1013State;
      reader.readMessage(value,proto.lakeside.T1013State.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.T1013BulbInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.T1013BulbInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.T1013BulbInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1013BulbInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lakeside.T1013State.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.lakeside.T1013BulbInfo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.T1013BulbInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.T1013BulbInfo.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013BulbInfo.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional T1013State packet = 2;
 * @return {?proto.lakeside.T1013State}
 */
proto.lakeside.T1013BulbInfo.prototype.getPacket = function() {
  return /** @type{?proto.lakeside.T1013State} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.T1013State, 2));
};


/** @param {?proto.lakeside.T1013State|undefined} value */
proto.lakeside.T1013BulbInfo.prototype.setPacket = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lakeside.T1013BulbInfo.prototype.clearPacket = function() {
  this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013BulbInfo.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.T1013Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.T1013Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.T1013Packet.displayName = 'proto.lakeside.T1013Packet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.T1013Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.T1013Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.T1013Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1013Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequence: jspb.Message.getField(msg, 1),
    code: jspb.Message.getField(msg, 2),
    ping: (f = msg.getPing()) && proto.lakeside.Ping.toObject(includeInstance, f),
    bulbinfo: (f = msg.getBulbinfo()) && proto.lakeside.T1013BulbInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.T1013Packet}
 */
proto.lakeside.T1013Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.T1013Packet;
  return proto.lakeside.T1013Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.T1013Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.T1013Packet}
 */
proto.lakeside.T1013Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = new proto.lakeside.Ping;
      reader.readMessage(value,proto.lakeside.Ping.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 5:
      var value = new proto.lakeside.T1013BulbInfo;
      reader.readMessage(value,proto.lakeside.T1013BulbInfo.deserializeBinaryFromReader);
      msg.setBulbinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.T1013Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.T1013Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.T1013Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1013Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lakeside.Ping.serializeBinaryToWriter
    );
  }
  f = message.getBulbinfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.lakeside.T1013BulbInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 sequence = 1;
 * @return {number}
 */
proto.lakeside.T1013Packet.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.T1013Packet.prototype.setSequence = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.T1013Packet.prototype.clearSequence = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Packet.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string code = 2;
 * @return {string}
 */
proto.lakeside.T1013Packet.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lakeside.T1013Packet.prototype.setCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lakeside.T1013Packet.prototype.clearCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Packet.prototype.hasCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Ping ping = 3;
 * @return {?proto.lakeside.Ping}
 */
proto.lakeside.T1013Packet.prototype.getPing = function() {
  return /** @type{?proto.lakeside.Ping} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.Ping, 3));
};


/** @param {?proto.lakeside.Ping|undefined} value */
proto.lakeside.T1013Packet.prototype.setPing = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.lakeside.T1013Packet.prototype.clearPing = function() {
  this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Packet.prototype.hasPing = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional T1013BulbInfo bulbinfo = 5;
 * @return {?proto.lakeside.T1013BulbInfo}
 */
proto.lakeside.T1013Packet.prototype.getBulbinfo = function() {
  return /** @type{?proto.lakeside.T1013BulbInfo} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.T1013BulbInfo, 5));
};


/** @param {?proto.lakeside.T1013BulbInfo|undefined} value */
proto.lakeside.T1013Packet.prototype.setBulbinfo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.lakeside.T1013Packet.prototype.clearBulbinfo = function() {
  this.setBulbinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1013Packet.prototype.hasBulbinfo = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.SwitchState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.SwitchState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.SwitchState.displayName = 'proto.lakeside.SwitchState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.SwitchState.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.SwitchState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.SwitchState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.SwitchState.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getField(msg, 1),
    state: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.SwitchState}
 */
proto.lakeside.SwitchState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.SwitchState;
  return proto.lakeside.SwitchState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.SwitchState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.SwitchState}
 */
proto.lakeside.SwitchState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.SwitchState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.SwitchState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.SwitchState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.SwitchState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 command = 1;
 * @return {number}
 */
proto.lakeside.SwitchState.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.SwitchState.prototype.setCommand = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.SwitchState.prototype.clearCommand = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.SwitchState.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 state = 2;
 * @return {number}
 */
proto.lakeside.SwitchState.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.lakeside.SwitchState.prototype.setState = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lakeside.SwitchState.prototype.clearState = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.SwitchState.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.SwitchStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.SwitchStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.SwitchStatus.displayName = 'proto.lakeside.SwitchStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.SwitchStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.SwitchStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.SwitchStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.SwitchStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    unknown1: jspb.Message.getField(msg, 1),
    power: jspb.Message.getField(msg, 2),
    unknown3: jspb.Message.getField(msg, 3),
    unknown4: jspb.Message.getField(msg, 4),
    unknown5: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.SwitchStatus}
 */
proto.lakeside.SwitchStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.SwitchStatus;
  return proto.lakeside.SwitchStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.SwitchStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.SwitchStatus}
 */
proto.lakeside.SwitchStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPower(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown3(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown4(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown5(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.SwitchStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.SwitchStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.SwitchStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.SwitchStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 unknown1 = 1;
 * @return {number}
 */
proto.lakeside.SwitchStatus.prototype.getUnknown1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.SwitchStatus.prototype.setUnknown1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.SwitchStatus.prototype.clearUnknown1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.SwitchStatus.prototype.hasUnknown1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 power = 2;
 * @return {number}
 */
proto.lakeside.SwitchStatus.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.lakeside.SwitchStatus.prototype.setPower = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lakeside.SwitchStatus.prototype.clearPower = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.SwitchStatus.prototype.hasPower = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 unknown3 = 3;
 * @return {number}
 */
proto.lakeside.SwitchStatus.prototype.getUnknown3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.lakeside.SwitchStatus.prototype.setUnknown3 = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.lakeside.SwitchStatus.prototype.clearUnknown3 = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.SwitchStatus.prototype.hasUnknown3 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 unknown4 = 4;
 * @return {number}
 */
proto.lakeside.SwitchStatus.prototype.getUnknown4 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.lakeside.SwitchStatus.prototype.setUnknown4 = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.lakeside.SwitchStatus.prototype.clearUnknown4 = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.SwitchStatus.prototype.hasUnknown4 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 unknown5 = 5;
 * @return {number}
 */
proto.lakeside.SwitchStatus.prototype.getUnknown5 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.lakeside.SwitchStatus.prototype.setUnknown5 = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.lakeside.SwitchStatus.prototype.clearUnknown5 = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.SwitchStatus.prototype.hasUnknown5 = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.SwitchPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.SwitchPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.SwitchPacket.displayName = 'proto.lakeside.SwitchPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.SwitchPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.SwitchPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.SwitchPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.SwitchPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    unknown1: jspb.Message.getField(msg, 1),
    switchset: (f = msg.getSwitchset()) && proto.lakeside.SwitchState.toObject(includeInstance, f),
    switchstatus: (f = msg.getSwitchstatus()) && proto.lakeside.SwitchStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.SwitchPacket}
 */
proto.lakeside.SwitchPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.SwitchPacket;
  return proto.lakeside.SwitchPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.SwitchPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.SwitchPacket}
 */
proto.lakeside.SwitchPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnknown1(value);
      break;
    case 3:
      var value = new proto.lakeside.SwitchState;
      reader.readMessage(value,proto.lakeside.SwitchState.deserializeBinaryFromReader);
      msg.setSwitchset(value);
      break;
    case 5:
      var value = new proto.lakeside.SwitchStatus;
      reader.readMessage(value,proto.lakeside.SwitchStatus.deserializeBinaryFromReader);
      msg.setSwitchstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.SwitchPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.SwitchPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.SwitchPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.SwitchPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSwitchset();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lakeside.SwitchState.serializeBinaryToWriter
    );
  }
  f = message.getSwitchstatus();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.lakeside.SwitchStatus.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 unknown1 = 1;
 * @return {number}
 */
proto.lakeside.SwitchPacket.prototype.getUnknown1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.SwitchPacket.prototype.setUnknown1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.SwitchPacket.prototype.clearUnknown1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.SwitchPacket.prototype.hasUnknown1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SwitchState switchset = 3;
 * @return {?proto.lakeside.SwitchState}
 */
proto.lakeside.SwitchPacket.prototype.getSwitchset = function() {
  return /** @type{?proto.lakeside.SwitchState} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.SwitchState, 3));
};


/** @param {?proto.lakeside.SwitchState|undefined} value */
proto.lakeside.SwitchPacket.prototype.setSwitchset = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.lakeside.SwitchPacket.prototype.clearSwitchset = function() {
  this.setSwitchset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.SwitchPacket.prototype.hasSwitchset = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SwitchStatus switchstatus = 5;
 * @return {?proto.lakeside.SwitchStatus}
 */
proto.lakeside.SwitchPacket.prototype.getSwitchstatus = function() {
  return /** @type{?proto.lakeside.SwitchStatus} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.SwitchStatus, 5));
};


/** @param {?proto.lakeside.SwitchStatus|undefined} value */
proto.lakeside.SwitchPacket.prototype.setSwitchstatus = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.lakeside.SwitchPacket.prototype.clearSwitchstatus = function() {
  this.setSwitchstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.SwitchPacket.prototype.hasSwitchstatus = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.SwitchInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.SwitchInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.SwitchInfo.displayName = 'proto.lakeside.SwitchInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.SwitchInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.SwitchInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.SwitchInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.SwitchInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    packet: (f = msg.getPacket()) && proto.lakeside.SwitchPacket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.SwitchInfo}
 */
proto.lakeside.SwitchInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.SwitchInfo;
  return proto.lakeside.SwitchInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.SwitchInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.SwitchInfo}
 */
proto.lakeside.SwitchInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.lakeside.SwitchPacket;
      reader.readMessage(value,proto.lakeside.SwitchPacket.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.SwitchInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.SwitchInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.SwitchInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.SwitchInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lakeside.SwitchPacket.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.lakeside.SwitchInfo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.SwitchInfo.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.SwitchInfo.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.SwitchInfo.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SwitchPacket packet = 2;
 * @return {?proto.lakeside.SwitchPacket}
 */
proto.lakeside.SwitchInfo.prototype.getPacket = function() {
  return /** @type{?proto.lakeside.SwitchPacket} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.SwitchPacket, 2));
};


/** @param {?proto.lakeside.SwitchPacket|undefined} value */
proto.lakeside.SwitchInfo.prototype.setPacket = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lakeside.SwitchInfo.prototype.clearPacket = function() {
  this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.SwitchInfo.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lakeside.T1201Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lakeside.T1201Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lakeside.T1201Packet.displayName = 'proto.lakeside.T1201Packet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lakeside.T1201Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.lakeside.T1201Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lakeside.T1201Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1201Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequence: jspb.Message.getField(msg, 1),
    code: jspb.Message.getField(msg, 2),
    ping: (f = msg.getPing()) && proto.lakeside.Ping.toObject(includeInstance, f),
    switchinfo: (f = msg.getSwitchinfo()) && proto.lakeside.SwitchInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lakeside.T1201Packet}
 */
proto.lakeside.T1201Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lakeside.T1201Packet;
  return proto.lakeside.T1201Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lakeside.T1201Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lakeside.T1201Packet}
 */
proto.lakeside.T1201Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = new proto.lakeside.Ping;
      reader.readMessage(value,proto.lakeside.Ping.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 5:
      var value = new proto.lakeside.SwitchInfo;
      reader.readMessage(value,proto.lakeside.SwitchInfo.deserializeBinaryFromReader);
      msg.setSwitchinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lakeside.T1201Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lakeside.T1201Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lakeside.T1201Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lakeside.T1201Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lakeside.Ping.serializeBinaryToWriter
    );
  }
  f = message.getSwitchinfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.lakeside.SwitchInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 sequence = 1;
 * @return {number}
 */
proto.lakeside.T1201Packet.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lakeside.T1201Packet.prototype.setSequence = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.lakeside.T1201Packet.prototype.clearSequence = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1201Packet.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string code = 2;
 * @return {string}
 */
proto.lakeside.T1201Packet.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lakeside.T1201Packet.prototype.setCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.lakeside.T1201Packet.prototype.clearCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1201Packet.prototype.hasCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Ping ping = 3;
 * @return {?proto.lakeside.Ping}
 */
proto.lakeside.T1201Packet.prototype.getPing = function() {
  return /** @type{?proto.lakeside.Ping} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.Ping, 3));
};


/** @param {?proto.lakeside.Ping|undefined} value */
proto.lakeside.T1201Packet.prototype.setPing = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.lakeside.T1201Packet.prototype.clearPing = function() {
  this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1201Packet.prototype.hasPing = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SwitchInfo switchinfo = 5;
 * @return {?proto.lakeside.SwitchInfo}
 */
proto.lakeside.T1201Packet.prototype.getSwitchinfo = function() {
  return /** @type{?proto.lakeside.SwitchInfo} */ (
    jspb.Message.getWrapperField(this, proto.lakeside.SwitchInfo, 5));
};


/** @param {?proto.lakeside.SwitchInfo|undefined} value */
proto.lakeside.T1201Packet.prototype.setSwitchinfo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.lakeside.T1201Packet.prototype.clearSwitchinfo = function() {
  this.setSwitchinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lakeside.T1201Packet.prototype.hasSwitchinfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.lakeside);
